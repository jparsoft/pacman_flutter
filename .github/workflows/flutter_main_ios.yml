# deploy ios
name: Flutter build and deploy

on:
  push:
    branches: ["main_ios"]
  pull_request:
    branches: ["main_ios"]

jobs:
  build:
    runs-on: macos-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v3

      - name: Set environment variables from project settings
        run: |
          exec .github/scripts/set-env-from-xcodeproj.sh

      - name: Import signing certificate
        env:
          SIGNING_CERTIFICATE_P12_DATA: ${{ secrets.SIGNING_CERTIFICATE_P12_DATA }}
          SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.SIGNING_CERTIFICATE_PASSWORD }}
        run: |
          exec .github/scripts/import-certificate.sh

      - name: Import provisioning profile
        env:
          PROVISIONING_PROFILE_DATA: ${{ secrets.PROVISIONING_PROFILE_DATA }}
        run: |
          exec .github/scripts/import-profile.sh

      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"
        #  flutter-version: "3.0.5"
      - run: flutter --version    
      - run: flutter pub get
      # flutter build scheme and signing
     
      - run: flutter build ios --release --no-codesign
      - uses: actions/upload-artifact@v2
        with:
          name: app-release.ipa
          path: build/ios/iphoneos/Runner.app

  deploy:
    needs: build
    runs-on: macos-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: app-release.ipa
      - uses: r0adkll/upload-google-play@v1
        with:
          packageName: "com.example.app"
          releaseFile: app-release.ipa
          serviceAccountJsonPlainText: ${{ secrets.SERVICE_ACCOUNT_JSON }}
# The first job is the build job. It runs on the latest macOS image and checks out the code. Then it uses the Flutter Action to install Flutter and run flutter pub get . Finally, it builds the app in release mode and uploads the IPA as an artifact.

# The second job is the deploy job. It runs on the latest macOS image and downloads the artifact from the build job. Then it uses the upload-google-play action to upload the IPA to the Play Store. The action requires a service account JSON file, which is stored as a secret in the repository.

# The service account JSON file can be generated in the Google Play Console. Go to Settings > API access and click on the Create Service Account button. Give the service account a name and click on the Create button. Then click on the Download JSON button to download the service account JSON file.

# The service account JSON file should be stored as a secret in the repository. Go to Settings > Secrets and click on the New repository secret button. Give the secret a name and paste the contents of the service account JSON file into the Value field. Then click on the Add secret button.
